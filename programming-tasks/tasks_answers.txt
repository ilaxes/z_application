=============================================================================
1. Python / Haskell / Perl / Your prefered scripting language.
a) array = [['a','b','c'],['d','e','f']]
How do I get this output?
a
b
c
d
e
f
==> see task_python.py

b) Have a look at "programming-tasks/top10_sample.csv"
Each line in this file represents a list of Brand in our store.
Write a script to print out a list of brand names and their occurrence counts (sorted).
==> see task_python.py

=============================================================================
2. SQL
a) What is the relation between Database, Schema, Tables, View in PostgreSQL / MySQL?
==> There is a kind of hierarchical relashionship between these entities.
==> Database is the main container and contains one or more named Schemas. 
==> Schemas are namespaces that contains Tables.
==> Views are "virtual tables" that are constructed through a query of the actual Tables.

b) What is the difference between a table and a view?
==> Tables contains actual data and Views are just the result of a query on the Tables.

c) Table reporting.items has 4 columns: Item_Code - Date - Visits - Orders
Write a query to get total number of Visit over all Item_Codes for the day '2013-01-12'.
==> SELECT SUM(Visits) AS Sum_visits
==> FROM reporting.items
==> WHERE Date >= '2013-01-12'::date AND Date < '2013-01-12'::date+1;
Write a query to get total number of visit over all Item_Codes for every year?.
==> SELECT extract(YEAR FROM Date) AS Year, SUM(Visits) AS Sum_visits
==> FROM reporting.items
==> group by Year;

d) As a DBA: in PostgreSQL DB, write query(s) needed to give account "buying" access to all tables currently in schema "sales", and all future Tables created in schema "sales".
==> GRANT USAGE ON SCHEMA sales TO buying;
==> GRANT SELECT ON ALL TABLES IN SCHEMA sales TO buying;
==> ALTER DEFAULT PRIVILEGES IN SCHEMA sales GRANT SELECT ON TABLES TO buying;

=============================================================================
3. Bash scripting
a) Write a bash script for the below set of tasks:
==> see task_bash.sh

How would you schedule the above as a cron job every day at 2.35am?
==> crontab -l | { cat; echo "35 2 * * * $SCRIPT_DIR/script.sh >>$SCRIPT_DIR/log_script.txt"; } | crontab -

b) Have a look at the folder "/programming-tasks/bash/"
- Write a bash script to rename all files below from "zalora-*" to "Zalora-*"
- All Zalora-* files contain a single string: "this is a test." (with a new line at the end):
    Write a shell script to change the content of those files to all uppercase.
    Write a shell script to remove all dot character (.) within those files.

$ ls
zalora-1.txt            zalora-2.txt            zalora-3.txt            zalora-4.txt            zalora-5-extra.txt      zalora-6.txt            other-zalora-file-1.txt other-zalora-file-2.txt

$ for i in zalora-*; do mv $i $(echo "$i" | sed 's/^./\U&/'); done;

$ ls
Zalora-1.txt            Zalora-2.txt            Zalora-3.txt            Zalora-4.txt            Zalora-5-extra.txt      Zalora-6.txt            other-zalora-file-1.txt other-zalora-file-2.txt

$ head Zalora-*
==> Zalora-1.txt <==
this is a test.

==> Zalora-2.txt <==
this is a test.

==> Zalora-3.txt <==
this is a test.

==> Zalora-4.txt <==
this is a test.

==> Zalora-5-extra.txt <==
this is a test.

==> Zalora-6.txt <==
this is a test.

$ sed -i 's/\(.*\)/\U\1/' Zalora-*;

$ head Zalora-*
==> Zalora-1.txt <==
THIS IS A TEST.

==> Zalora-2.txt <==
THIS IS A TEST.

==> Zalora-3.txt <==
THIS IS A TEST.

==> Zalora-4.txt <==
THIS IS A TEST.

==> Zalora-5-extra.txt <==
THIS IS A TEST.

==> Zalora-6.txt <==
THIS IS A TEST.

$ sed -i 's/\.//' Zalora-*;

$ head Zalora-*
==> Zalora-1.txt <==
THIS IS A TEST

==> Zalora-2.txt <==
THIS IS A TEST

==> Zalora-3.txt <==
THIS IS A TEST

==> Zalora-4.txt <==
THIS IS A TEST

==> Zalora-5-extra.txt <==
THIS IS A TEST

==> Zalora-6.txt <==
THIS IS A TEST
